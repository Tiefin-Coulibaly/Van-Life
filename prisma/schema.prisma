datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// MODELS 
model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  firstName     String?
  lastName      String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role           @default(Renter)
  phone         String?
  bookings      Booking[]
  reviews       Review[]
  payments      Payment[]
  notification  Notification[]
  vansOwned     Van[]
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Van {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  price             Float
  description       String
  images            String[]
  type              Type
  available         Boolean
  bookings          Booking[]
  location          Location
  rating            Float?
  reviews           Review[]
  features          Features?
  fuelType          FuelType
  mileage           Float?
  insuranceIncluded Boolean?
  payments          Payment[]
  userId            String?   @db.ObjectId
  owner             User?     @relation(fields: [userId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("vans")
}

model Booking {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  vanId       String        @db.ObjectId
  van         Van           @relation(fields: [vanId], references: [id])
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  startDate   DateTime
  endDate     DateTime
  status      BookingStatus @default(Pending)
  totalAmount Float
  payment     Payment?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("bookings")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  vanId     String   @db.ObjectId
  van       Van      @relation(fields: [vanId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  comment   String?
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  bookingId String        @unique @db.ObjectId
  booking   Booking       @relation(fields: [bookingId], references: [id])
  userId    String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  vanId     String        @db.ObjectId
  van       Van           @relation(fields: [vanId], references: [id])
  amount    Float
  status    PaymentStatus @default(Pending)
  method    PaymentMethod @default(CreditCard)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("payments")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  title     String
  Message   String
  link      String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("notifications")
}

// ENUMS
enum Role {
  Renter
  Owner
  Admin
}

enum PaymentMethod {
  CreditCard
  Paypal
}

enum PaymentStatus {
  Pending
  Confirmed
  Failed
}

enum BookingStatus {
  Pending
  Confirmed
  Canceled
}

enum Type {
  Simple
  Rugged
  Luxury
}

enum FuelType {
  Gasoline
  Diesel
  Electric
}

//TYPES

enum NotificationType {
  Booking
  Payment
  Message
  Alert
  System
}

type Location {
  city    String
  country String
}

type Features {
  seats            Int?
  sleepingCapacity Int?
  hasKitchen       Boolean?
  hasToilet        Boolean?
  hasAC            Boolean?
  hasHeating       Boolean?
  petFriendly      Boolean?
}
