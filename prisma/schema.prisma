datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}


  firstName: string;
  lastName: string;
  email: string;
  password: string;
  role: "renter" | "owner" | "admin";
  phone?: string;
  profilePic?: string;
  vansOwned?: Types.ObjectId[];
  bookings?: Types.ObjectId[];


enum Role {
  Renter
  Owner
  Admin
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  firstName          String
  lastName      String
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password: string
  role      Role @default(Renter)
  phone String?
  bookings  Booking[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}


model Van {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name: String?
  price Float
  description String
  images String[]
  type Type
  available Boolean
  bookings Booking[]
  location: Location
  rating Float?
  review Review[]
  features Features? 
  fuelType FuelType
  mileage Float?
  insuranceIncluded Boolean?
  payments Payment[]
  owner 
}

model Booking {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  vanId  String  @db.ObjectId
  van Van @relation(fields:[vanId], references:[id])
  userId String @db.ObjectId
  user User @relation(fields:[userId], references:[id])
  startDate DateTime
  endDate  DateTime
  status BookingStatus @default(Pending)
  totalAmount Float
  createdAt  DateTime @default(now())
}

model Review {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId

}

export interface IReview extends Document {
  vanId:  Types.ObjectId;
  renterId: Types.ObjectId;
  comment?: string;
  rating: number;
  date: Date;
}




enum BookingStatus {
  Pending
  Confirmed
  Canceled
}

enum Type {
  Simple
  Rugged
  Luxury
}

enum FuelType {
  Gasoline
  Diesel
  Electric
}

type Location {
  city:     String
  country:  String
}

type Features {
  seats: Int?;
  sleepingCapacity: Int?;
  hasKitchen: Boolean?;
  hasToilet: Boolean?;
  hasAC: Boolean?;
  hasHeating: Boolean?;
  petFriendly: Boolean?;
}